name: Agent Engineer
on:
  repository_dispatch:
    types: [agent-engineer]
  workflow_dispatch:
    inputs:
      issue_number: { description: Issue #, required: true }
      plan_path:    { description: Plan path, required: false }
      issue_title:  { description: Issue title, required: false }
concurrency:
  group: agent-engineer-${{ github.event.client_payload.issue_number || inputs.issue_number || github.run_id }}
  cancel-in-progress: false
permissions:
  contents: write
  pull-requests: write
jobs:
  engineer:
    runs-on: ubuntu-latest
    env:
      ISSUE_NUMBER: ${{ github.event.client_payload.issue_number || inputs.issue_number || '0' }}
      PLAN_PATH:    ${{ github.event.client_payload.plan_path    || inputs.plan_path    || '' }}
      ISSUE_TITLE:  ${{ github.event.client_payload.issue_title  || inputs.issue_title  || '' }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Decide mode & prepare changes (always create a diff)
        shell: bash
        run: |
          set -e
          mkdir -p config reports/agent_runs tests
          TITLE_LC="$(echo "${ISSUE_TITLE}" | tr '[:upper:]' '[:lower:]')"
          if echo "$TITLE_LC" | grep -Eiq "(deterministic|gate)"; then
            echo "MODE=policy" >> $GITHUB_ENV
            if [ ! -f config/policies.yaml ]; then
              cat > config/policies.yaml << 'YAML'
deterministic_first: true
llm_escalation: gated
YAML
            fi
            if [ -f README.md ] && ! grep -q "How it works (ai-company)" README.md; then
              printf "\n\n### How it works (ai-company)\nOrchestrator → Agents → PR → HITL.\n" >> README.md
            fi
          else
            echo "MODE=tests" >> $GITHUB_ENV
          fi
          ACK="reports/agent_runs/engineer-issue-${ISSUE_NUMBER}.md"
          if [ ! -f "$ACK" ]; then
            echo "# Engineer run for Issue #${ISSUE_NUMBER}" > "$ACK"
            echo "Plan: ${PLAN_PATH}" >> "$ACK"
          fi
      - name: Ensure test scaffolding (only for parsing/normalize tasks)
        if: ${{ env.MODE == 'tests' }}
        run: |
          if [ ! -f tests/test_normalize_leads.py ]; then
            cat > tests/test_normalize_leads.py << 'PY'
import json, subprocess
def run_csv(inp):
  p = subprocess.run(["python","scripts/normalize_leads.py"], input=inp.encode(), capture_output=True)
  assert p.returncode == 0, p.stderr.decode()
  return json.loads(p.stdout.decode())
def test_basic_normalization():
  csv = "Name , Email \n Alice , alice@example.com \n"
  out = run_csv(csv)
  assert isinstance(out, list) and len(out) >= 1
PY
          fi
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: |
          python -m pip install --upgrade pip
          python -m pip install pytest || true
      - name: Quick local test (non-blocking)
        continue-on-error: true
        run: |
          if [ -f tests/test_normalize_leads.py ]; then pytest -q || true; else echo "no tests yet"; fi
      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore(engineer): initialize changes for Issue #${{ env.ISSUE_NUMBER }}"
          branch: "agent/engineer/issue-${{ env.ISSUE_NUMBER }}"
          title: "Engineer: Änderungen für #${{ env.ISSUE_NUMBER }}"
          body: |
            Basierend auf Plan: `${{ env.PLAN_PATH }}`
            - Automatischer Engineer-Run (Ack-Datei)
            - Falls „Deterministic/Gate“ im Titel: `config/policies.yaml`
            - Falls Parsing/Normalize: Smoke-Test scaffold
          labels: agent:engineer, ready-for-review
          signoff: true
          delete-branch: true
