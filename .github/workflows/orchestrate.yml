name: Orchestrator

on:
  issues:
    types: [labeled]   # vermeidet doppelte Runs

concurrency:
  group: orchestrate-${{ github.event.issue.number }}
  cancel-in-progress: false

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

jobs:
  orchestrate:
    if: ${{ github.event.label.name == 'task:agent' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run orchestrator
        id: orch
        env:
          GITHUB_EVENT_PATH: ${{ github.event_path }}
        run: python scripts/orchestrate.py

      - name: Commit plan files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add reports/board/ || true
          git commit -m "chore(plan): add/update plan for #${{ github.event.issue.number }}" || echo "No changes"
          git push || true

      - name: Comment plan link on issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue.number;
            const planPath = process.env.PLAN_PATH || "(keine Plan-Datei gefunden)";
            const body = `Plan erzeugt/aktualisiert: \`${planPath}\``;
            await github.rest.issues.createComment({ ...context.repo, issue_number, body });
        env:
          PLAN_PATH: ${{ steps.orch.outputs.plan_path }}

      - name: Dispatch Engineer/Growth
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = (issue.title || "").toLowerCase();
            const wantsEngineer = /(parse|script|normalize|gate|test|engineer|pipeline)/.test(title);
            const wantsGrowth   = /(outreach|draft|growth|message|email|template)/.test(title);
            const payloadBase = {
              issue_number: issue.number,
              plan_path: process.env.PLAN_PATH || "",
              issue_title: issue.title
            };
            if (wantsEngineer) {
              await github.rest.repos.createDispatchEvent({
                owner: context.repo.owner, repo: context.repo.repo,
                event_type: 'agent-engineer', client_payload: payloadBase
              });
            }
            if (wantsGrowth) {
              await github.rest.repos.createDispatchEvent({
                owner: context.repo.owner, repo: context.repo.repo,
                event_type: 'agent-growth', client_payload: payloadBase
              });
            }
        env:
          PLAN_PATH: ${{ steps.orch.outputs.plan_path }}

